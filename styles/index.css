.stack-index {
  /* ↓ The flex context */
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack-index > * {
  /* ↓ Any extant vertical margins are removed */
  margin-block: 0;
}

.stack-index > * + * {
  /* ↓ Top margin is only applied to successive elements */
  margin-block-start: var(--space, 1.5rem);
}











.cover-index {
  --space: var(--s1);
  /* ↓ Establish a columnal flex context */
  display: flex;
  flex-direction: column;
  /* ↓ Set a minimum height to match the viewport height
  (any minimum would be fine) */
  min-block-size:5vh;
  /* Set a padding value */
  padding: var(--space);
}

.cover-index > * {
  /* ↓ Give each child a top and bottom margin */
  margin-block: var(--s1);
}

.cover-index > :first-child:not(h1) {
  /* ↓ Remove the top margin from the first-child
  if it _doesn't_ match the centered element */
  margin-block-start: 0;
}

.cover-index > :last-child:not(h1) {
  /* ↓ Remove the bottom margin from the last-child
  if it _doesn't_ match the centered element */
  margin-block-end: 0;
}

.cover-index > img {
  /* ↓ Center the centered element (h1 here)
  in the available vertical space */
  margin-block: auto;
}










.frame-index {
  position: relative;
  --n: 16; /* numerator */
  --d: 9; /* denominator */
  aspect-ratio: var(--n) / var(--d);
  overflow: hidden;
  display: flex;
  justify-content: center;
  align-items: center;
}

.frame-index > img,
.frame-index > video {
  inline-size: 100%;
  block-size: 100%;
  object-fit: cover;
}

.imposter-index {
  overflow: visible;
  position: absolute;
  /* inset-block-start: 30%; */
  inset-inline-start: 50%;
  transform: translate(-50%, -50%);
  /*
  important: layout 
  controls the vertical position of the class by "sucking" out the "width" and the "height" */
  max-inline-size: calc(50% - -1rem);
  max-block-size: calc(50% - 1rem);
}

/* Media query to dynamically scale ALL text */

@media (max-width: 867px) {
  .imposter-index {
    inset-block-start: 35%;
  }
}

@media (max-width:425px) {
  .imposter-index {
    inset-block-start: 25%;
  }
}

.imposter-index.contain {
  /* ↓ Include a unit, or the calc function will be invalid */
  --margin: 100px;
  /* ↓ Provide scrollbars so content is not obscured */
  overflow: auto;
  /* ↓ Restrict the height and width, including optional
  spacing/margin between the element and positioning container */
  max-inline-size: calc(100% - (var(--margin) * 0));
  max-block-size: calc(100% - (var(--margin) * 0));
}






.box-index {
  /* ↓ Padding set to the first point on the modular scale */
  padding: var(--s0);
  /* ↓ Assumes you have a --border-thin var */
  border: var(--border-thin) solid;
  /* ↓ Always apply the transparent outline, for high contrast mode */
  outline: var(--border-thin) transparent;
  outline-offset: calc(var(--border-thin) * -1);
  /* ↓ The light and dark color vars */
  --color-light: #fff;
  --color-dark: #000;
  color: var(--color-dark);
  background-color: var(--color-light);
  }
  
  .box-index * {
  /* ↓ Force colors to inherit from the parent
  and honor inversion (below) */
  color: inherit;
  }
  
  .box-index.invert {
  /* ↓ The color vars inverted */
  color: var(--color-light);
  background-color: var(--color-dark);
  }








  .grid {
    /* ↓ Establish a grid context */
    display: grid;
    /* ↓ Set a gap between grid items */
    grid-gap: 1rem;
    /* ↓ Set the minimum column width */
    --minimum: 35ch;
    }
      
    @supports (width: min(var(--minimum), 100%)) {
      .grid {
        /* ↓ Enhance with the min() function
        into multiple columns */
        grid-template-columns: repeat(auto-fit, minmax(min(var(--minimum), 100%),
        1fr));
      }
    }